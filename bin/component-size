#!/usr/bin/env node

var component = require('component');
var each = require('each-component');
var extend = require('extend');
var fs = require('fs');
var json = require('../package.json');
var map = require('map');
var pad = require('pad-component');
var path = require('path');
var program = require('commander');
var utils = component.utils;


/**
 * Program.
 */

program
  .option('-s, --styles', 'count the styles filesize')
  .option('-a, --all', 'include static files in the count')
  .version(json.version)
  .description(json.description)
  .parse(process.argv);


/**
 * Walk the packages.
 */

var file = path.resolve('component.json');
if (!fs.existsSync(file)) utils.fatal('missing component.json');
stat(file);


/**
 * Log the sizes of a component.json `file`'s local files and all of it's
 * dependencies.
 *
 * @param {String} file
 */

function stat (file) {
  var packages = sort(sizes(file));
  var nameLength = 0;
  var sizeLength = 0;

  each(packages, function (name, size) {
    size = kb(size);
    packages[name] = size;
    if (name.length > nameLength) nameLength = name.length;
    if (size.length > sizeLength) sizeLength = size.length;
  });

  function print (name) {
    log(name, nameLength, packages[name], sizeLength);
    delete packages[name];
  }

  console.log();
  print('total');
  console.log();
  print(name(file));
  console.log();
  each(packages, print);
  console.log();
}


/**
 * Sort a `packages` object by file size.
 *
 * @param {Object} packages
 * @return {Object}
 */

function sort (packages) {
  var ret = {};
  var arr = map(packages, function (key, val) {
    return {
      name: key,
      size: val
    };
  });

  arr.sort(function (a, b) {
    if (a.size > b.size) return -1;
    if (a.size < b.size) return 1;
    return 0;
  });

  each(arr, function (pkg) {
    ret[pkg.name] = pkg.size;
  });

  return ret;
}


/**
 * Convert a `size` in bytes to a kilobyte string.
 *
 * @param {Number} bytes
 * @return {String}
 */

function kb (bytes) {
  var num = Math.round(bytes / (1 << 10) * 100) / 100;
  if (/\.\d{1}$/.test(num)) num = num + '0';
  return num + ' kb';
}


/**
 * Get the name of a component.json `file`.
 *
 * @param {String} file
 */

function name (file) {
  var json = require(path.resolve(file));
  return json.repo || json.name;
}


/**
 * Log the size of a single component with a `name` and `size` in bytes. The
 * `nameLength` and `sizeLength` determine how much to pad the values by.
 *
 * @param {String} name
 * @param {Number} nameLength
 * @param {Number} size
 * @param {Number} sizeLength
 */

function log (name, nameLength, size, sizeLength) {
  name = pad.right(name + ' ' , nameLength + 2);
  size = pad.left(' ' + size, sizeLength + 1);
  utils.log('size', name + size);
}


/**
 * Calculate the sizes of all of an component.json `file`'s dependencies.
 *
 * @param {String} file
 * @param {String} name (optional)
 * @param {String} parent (optional)
 * @return {Object}
 */

function sizes (file) {
  var json = require(path.resolve(file));
  var root = name(file);
  var rootpaths = ['.'].concat(json.paths || []);

  var ret = {};
  ret[root] = size(file);

  var deps = dependencies(file, rootpaths);
  for (var key in deps) {
    ret[key] = size(deps[key]);
  }

  var total = 0;
  each(ret, function (name, size) {
    total += size;
  });
  ret.total = total;

  return ret;
}


/**
 * Given a component.json `file`, return the size in bytes of it's locals.
 *
 * @param {String} file
 * @return {Number}
 */

function size (file) {
  var files = locals(file);
  return files.reduce(function (bytes, file) {
    return bytes + fs.statSync(file).size;
  }, 0);
}


/**
 * Given a component.json `file`, return a dictionary of the component.json
 * files of all of its dependencies.
 *
 * @param {String} file
 * @return {Object}
 */

function dependencies (file, rootpaths) {
  var json = require(path.resolve(file));
  var deps = json.dependencies || {};
  var ret = {};

  for (var key in deps) {
    var slug = key.replace('/', '-').toLowerCase();
    var dep = path.resolve('components', slug, 'component.json');
    ret[key] = dep;
    extend(ret, dependencies(dep, rootpaths));
  }

  // also find local dependencies
  var locals = json.local || [];
  for (var j = 0; j < locals.length; j++) {
    var local = locals[j];
    for (var i = 0; i < rootpaths.length; i++) {
      var trypath = rootpaths[i];
      var file = path.resolve(trypath, local, 'component.json');
      if (fs.existsSync(file)) {
        ret[trypath + '/' + local] = file;
        extend(ret, dependencies(file, rootpaths));
      }
    }
  }

  return ret;
}


/**
 * Given a component.json `file` return the filenames of it's locals.
 *
 * @param {String} file
 * @return {Array}
 */

function locals (file) {
  var dir = path.dirname(file);
  var json = require(path.resolve(file));
  var sources = [];
  var files = [];

  if (program.styles || program.all) {
    sources.push('styles');
  }

  if (!program.styles || program.all) {
    sources.push('scripts', 'templates', 'json');
  }

  if (program.all) {
    sources.push('images', 'fonts', 'files');
  }

  sources.forEach(function (source) {
    if (json[source]) files = files.concat(json[source]);
  });

  return files.map(function (file) {
    return path.resolve(dir, file);
  });
}
